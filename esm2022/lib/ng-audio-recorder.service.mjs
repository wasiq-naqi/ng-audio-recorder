import { EventEmitter, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class NgAudioRecorderService {
    constructor() {
        this.chunks = [];
        this.recorderEnded = new EventEmitter();
        this.recorderError = new EventEmitter();
        // tslint:disable-next-line
        this._recorderState = RecorderState.INITIALIZING;
        this.appendToChunks = (event) => {
            this.chunks.push(event.data);
        };
        this.recordingStopped = (event) => {
            const blob = new Blob(this.chunks, { type: 'audio/webm' });
            this.chunks = [];
            this.recorderEnded.emit(blob);
            this.clear();
        };
    }
    static guc() {
        return navigator.mediaDevices.getUserMedia({ audio: true });
    }
    getUserContent() {
        return NgAudioRecorderService.guc();
    }
    startRecording() {
        if (this._recorderState === RecorderState.RECORDING) {
            this.recorderError.emit(ErrorCase.ALREADY_RECORDING);
        }
        if (this._recorderState === RecorderState.PAUSED) {
            this.resume();
            return;
        }
        this._recorderState = RecorderState.INITIALIZING;
        NgAudioRecorderService.guc().then((mediaStream) => {
            this.recorder = new MediaRecorder(mediaStream);
            this._recorderState = RecorderState.INITIALIZED;
            this.addListeners();
            this.recorder.start();
            this._recorderState = RecorderState.RECORDING;
        });
    }
    pause() {
        if (this._recorderState === RecorderState.RECORDING) {
            this.recorder.pause();
            this._recorderState = RecorderState.PAUSED;
        }
    }
    resume() {
        if (this._recorderState === RecorderState.PAUSED) {
            this._recorderState = RecorderState.RECORDING;
            this.recorder.resume();
        }
    }
    stopRecording(outputFormat) {
        this._recorderState = RecorderState.STOPPING;
        return new Promise((resolve, reject) => {
            this.recorderEnded.subscribe((blob) => {
                this._recorderState = RecorderState.STOPPED;
                if (outputFormat === OutputFormat.WEBM_BLOB) {
                    resolve(blob);
                }
                if (outputFormat === OutputFormat.WEBM_BLOB_URL) {
                    const audioURL = URL.createObjectURL(blob);
                    resolve(audioURL);
                }
            }, _ => {
                this.recorderError.emit(ErrorCase.RECORDER_TIMEOUT);
                reject(ErrorCase.RECORDER_TIMEOUT);
            });
            this.recorder.stop();
        }).catch(() => {
            this.recorderError.emit(ErrorCase.USER_CONSENT_FAILED);
        });
    }
    getRecorderState() {
        return this._recorderState;
    }
    addListeners() {
        this.recorder.ondataavailable = this.appendToChunks;
        this.recorder.onstop = this.recordingStopped;
    }
    clear() {
        this.recorder = null;
        this.chunks = [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgAudioRecorderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgAudioRecorderService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgAudioRecorderService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
export var OutputFormat;
(function (OutputFormat) {
    OutputFormat[OutputFormat["WEBM_BLOB_URL"] = 0] = "WEBM_BLOB_URL";
    OutputFormat[OutputFormat["WEBM_BLOB"] = 1] = "WEBM_BLOB";
})(OutputFormat || (OutputFormat = {}));
export var ErrorCase;
(function (ErrorCase) {
    ErrorCase[ErrorCase["USER_CONSENT_FAILED"] = 0] = "USER_CONSENT_FAILED";
    ErrorCase[ErrorCase["RECORDER_TIMEOUT"] = 1] = "RECORDER_TIMEOUT";
    ErrorCase[ErrorCase["ALREADY_RECORDING"] = 2] = "ALREADY_RECORDING";
})(ErrorCase || (ErrorCase = {}));
export var RecorderState;
(function (RecorderState) {
    RecorderState[RecorderState["INITIALIZING"] = 0] = "INITIALIZING";
    RecorderState[RecorderState["INITIALIZED"] = 1] = "INITIALIZED";
    RecorderState[RecorderState["RECORDING"] = 2] = "RECORDING";
    RecorderState[RecorderState["PAUSED"] = 3] = "PAUSED";
    RecorderState[RecorderState["STOPPING"] = 4] = "STOPPING";
    RecorderState[RecorderState["STOPPED"] = 5] = "STOPPED";
})(RecorderState || (RecorderState = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYXVkaW8tcmVjb3JkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWF1ZGlvLXJlY29yZGVyL3NyYy9saWIvbmctYXVkaW8tcmVjb3JkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLekQsTUFBTSxPQUFPLHNCQUFzQjtJQVFqQztRQU5RLFdBQU0sR0FBZSxFQUFFLENBQUM7UUFDdEIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3RDLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQWEsQ0FBQztRQUNyRCwyQkFBMkI7UUFDbkIsbUJBQWMsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDO1FBZ0Y1QyxtQkFBYyxHQUFHLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQztRQUNNLHFCQUFnQixHQUFHLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFDLElBQUksRUFBRSxZQUFZLEVBQUMsQ0FBQyxDQUFDO1lBQ3pELElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNmLENBQUMsQ0FBQztJQXJGRixDQUFDO0lBS08sTUFBTSxDQUFDLEdBQUc7UUFDaEIsT0FBTyxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQzVELENB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QUVPLFlBQVk7UUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUNwRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDL0MsQ0FBQztJQVlPLEtBQUs7UUFDWCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDOytHQW5HVSxzQkFBc0I7bUhBQXRCLHNCQUFzQjs7NEZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVTs7QUF3R1gsTUFBTSxDQUFOLElBQVksWUFHWDtBQUhELFdBQVksWUFBWTtJQUN0QixpRUFBYSxDQUFBO0lBQ2IseURBQVMsQ0FBQTtBQUNYLENBQUMsRUFIVyxZQUFZLEtBQVosWUFBWSxRQUd2QjtBQUVELE1BQU0sQ0FBTixJQUFZLFNBSVg7QUFKRCxXQUFZLFNBQVM7SUFDbkIsdUVBQW1CLENBQUE7SUFDbkIsaUVBQWdCLENBQUE7SUFDaEIsbUVBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUpXLFNBQVMsS0FBVCxTQUFTLFFBSXBCO0FBRUQsTUFBTSxDQUFOLElBQVksYUFPWDtBQVBELFdBQVksYUFBYTtJQUN2QixpRUFBWSxDQUFBO0lBQ1osK0RBQVcsQ0FBQTtJQUNYLDJEQUFTLENBQUE7SUFDVCxxREFBTSxDQUFBO0lBQ04seURBQVEsQ0FBQTtJQUNSLHVEQUFPLENBQUE7QUFDVCxDQUFDLEVBUFcsYUFBYSxLQUFiLGFBQWEsUUFPeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZGVjbGFyZSB2YXIgTWVkaWFSZWNvcmRlcjogYW55O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmdBdWRpb1JlY29yZGVyU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBjaHVua3M6IEFycmF5PGFueT4gPSBbXTtcbiAgcHJvdGVjdGVkIHJlY29yZGVyRW5kZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHB1YmxpYyByZWNvcmRlckVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxFcnJvckNhc2U+KCk7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICBwcml2YXRlIF9yZWNvcmRlclN0YXRlID0gUmVjb3JkZXJTdGF0ZS5JTklUSUFMSVpJTkc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBwcml2YXRlIHJlY29yZGVyOiBhbnk7XG5cblxuICBwcml2YXRlIHN0YXRpYyBndWMoKSB7XG4gICAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHthdWRpbzogdHJ1ZX0pO1xuICB9XG5cblxuICBnZXRVc2VyQ29udGVudCgpIHtcbiAgICByZXR1cm4gTmdBdWRpb1JlY29yZGVyU2VydmljZS5ndWMoKTtcbiAgfVxuXG4gIHN0YXJ0UmVjb3JkaW5nKCkge1xuICAgIGlmICh0aGlzLl9yZWNvcmRlclN0YXRlID09PSBSZWNvcmRlclN0YXRlLlJFQ09SRElORykge1xuICAgICAgdGhpcy5yZWNvcmRlckVycm9yLmVtaXQoRXJyb3JDYXNlLkFMUkVBRFlfUkVDT1JESU5HKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3JlY29yZGVyU3RhdGUgPT09IFJlY29yZGVyU3RhdGUuUEFVU0VEKSB7XG4gICAgICB0aGlzLnJlc3VtZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9yZWNvcmRlclN0YXRlID0gUmVjb3JkZXJTdGF0ZS5JTklUSUFMSVpJTkc7XG4gICAgTmdBdWRpb1JlY29yZGVyU2VydmljZS5ndWMoKS50aGVuKChtZWRpYVN0cmVhbSkgPT4ge1xuICAgICAgdGhpcy5yZWNvcmRlciA9IG5ldyBNZWRpYVJlY29yZGVyKG1lZGlhU3RyZWFtKTtcbiAgICAgIHRoaXMuX3JlY29yZGVyU3RhdGUgPSBSZWNvcmRlclN0YXRlLklOSVRJQUxJWkVEO1xuICAgICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMucmVjb3JkZXIuc3RhcnQoKTtcbiAgICAgIHRoaXMuX3JlY29yZGVyU3RhdGUgPSBSZWNvcmRlclN0YXRlLlJFQ09SRElORztcbiAgICB9KTtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIGlmICh0aGlzLl9yZWNvcmRlclN0YXRlID09PSBSZWNvcmRlclN0YXRlLlJFQ09SRElORykge1xuICAgICAgdGhpcy5yZWNvcmRlci5wYXVzZSgpO1xuICAgICAgdGhpcy5fcmVjb3JkZXJTdGF0ZSA9IFJlY29yZGVyU3RhdGUuUEFVU0VEO1xuICAgIH1cbiAgfVxuXG4gIHJlc3VtZSgpIHtcbiAgICBpZiAodGhpcy5fcmVjb3JkZXJTdGF0ZSA9PT0gUmVjb3JkZXJTdGF0ZS5QQVVTRUQpIHtcbiAgICAgIHRoaXMuX3JlY29yZGVyU3RhdGUgPSBSZWNvcmRlclN0YXRlLlJFQ09SRElORztcbiAgICAgIHRoaXMucmVjb3JkZXIucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgc3RvcFJlY29yZGluZyhvdXRwdXRGb3JtYXQ6IE91dHB1dEZvcm1hdCkge1xuICAgIHRoaXMuX3JlY29yZGVyU3RhdGUgPSBSZWNvcmRlclN0YXRlLlNUT1BQSU5HO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlY29yZGVyRW5kZWQuc3Vic2NyaWJlKChibG9iKSA9PiB7XG4gICAgICAgIHRoaXMuX3JlY29yZGVyU3RhdGUgPSBSZWNvcmRlclN0YXRlLlNUT1BQRUQ7XG4gICAgICAgIGlmIChvdXRwdXRGb3JtYXQgPT09IE91dHB1dEZvcm1hdC5XRUJNX0JMT0IpIHtcbiAgICAgICAgICByZXNvbHZlKGJsb2IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdXRwdXRGb3JtYXQgPT09IE91dHB1dEZvcm1hdC5XRUJNX0JMT0JfVVJMKSB7XG4gICAgICAgICAgY29uc3QgYXVkaW9VUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgIHJlc29sdmUoYXVkaW9VUkwpO1xuICAgICAgICB9XG4gICAgICB9LCBfID0+IHtcbiAgICAgICAgdGhpcy5yZWNvcmRlckVycm9yLmVtaXQoRXJyb3JDYXNlLlJFQ09SREVSX1RJTUVPVVQpO1xuICAgICAgICByZWplY3QoRXJyb3JDYXNlLlJFQ09SREVSX1RJTUVPVVQpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlY29yZGVyLnN0b3AoKTtcbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLnJlY29yZGVyRXJyb3IuZW1pdChFcnJvckNhc2UuVVNFUl9DT05TRU5UX0ZBSUxFRCk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRSZWNvcmRlclN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRlclN0YXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZWNvcmRlci5vbmRhdGFhdmFpbGFibGUgPSB0aGlzLmFwcGVuZFRvQ2h1bmtzO1xuICAgIHRoaXMucmVjb3JkZXIub25zdG9wID0gdGhpcy5yZWNvcmRpbmdTdG9wcGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBhcHBlbmRUb0NodW5rcyA9IChldmVudDogYW55KSA9PiB7XG4gICAgdGhpcy5jaHVua3MucHVzaChldmVudC5kYXRhKTtcbiAgfTtcbiAgcHJpdmF0ZSByZWNvcmRpbmdTdG9wcGVkID0gKGV2ZW50OiBhbnkpID0+IHtcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IodGhpcy5jaHVua3MsIHt0eXBlOiAnYXVkaW8vd2VibSd9KTtcbiAgICB0aGlzLmNodW5rcyA9IFtdO1xuICAgIHRoaXMucmVjb3JkZXJFbmRlZC5lbWl0KGJsb2IpO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfTtcblxuICBwcml2YXRlIGNsZWFyKCkge1xuICAgIHRoaXMucmVjb3JkZXIgPSBudWxsO1xuICAgIHRoaXMuY2h1bmtzID0gW107XG4gIH1cbn1cblxuXG5leHBvcnQgZW51bSBPdXRwdXRGb3JtYXQge1xuICBXRUJNX0JMT0JfVVJMLFxuICBXRUJNX0JMT0IsXG59XG5cbmV4cG9ydCBlbnVtIEVycm9yQ2FzZSB7XG4gIFVTRVJfQ09OU0VOVF9GQUlMRUQsXG4gIFJFQ09SREVSX1RJTUVPVVQsXG4gIEFMUkVBRFlfUkVDT1JESU5HXG59XG5cbmV4cG9ydCBlbnVtIFJlY29yZGVyU3RhdGUge1xuICBJTklUSUFMSVpJTkcsXG4gIElOSVRJQUxJWkVELFxuICBSRUNPUkRJTkcsXG4gIFBBVVNFRCxcbiAgU1RPUFBJTkcsXG4gIFNUT1BQRURcbn1cbiJdfQ==